direccionArchivoLectura: .asciiz "C:/Users/Usuario/Documents/ParserMIPS/data.231020221943"
saltoLinea: .asciiz "\n"
buffer: .space 1
arregloIP: .space 3000
arregloUNM: .space 1600
arregloTSP: .space 1600

.text
main:
	li	$v0, 13
	la	$a0, direccionArchivoLectura
	li	$a1, 0
	li	$a2, 0
	syscall

	move 	$t0, $v0

	li	$v0, 14
	move	$a0, $t0
	la	$a1, buffer
	li	$a2, 1
	syscall

	la 	$t1, arregloIP
	la	$t2, arregloUNM
	la	$t3, arregloTSP

	move	$t4, $t0		# Cargar el apuntador de lectura del archivo en $t4

cicloTokenizarArchivo:

lb   $t5, $t4        # Leer un byte del archivo
    beqz $t5, terminarPrograma   # Si el byte es cero, terminar el programa
    addiu $t4, $t4, 1       # Incrementar el apuntador de lectura del archivo

lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '|', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 'i', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 'p', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, ':', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '"', terminarPrograma

addiu $t4, $t4, 1
lb   $t5, $t4        # Leer el siguiente byte del archivo

cicloTokenizarIP:
sb   $t5, $t1        # Almacenar el byte en el arreglo de IP
    addiu $t1, $t1, 1       # Incrementar el apuntador del arreglo de IP
addiu $t4, $t4, 1       # Incrementar el apuntador de lectura del archivo	
    lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '"', cicloTokenizarIP    # Continuar tokenizando mientras no se encuentre una comilla doble

addiu $t4, $t4, 1

lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '|', terminarPrograma
    addiu $t4, $t4, 1

lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 'u', terminarPrograma
    addiu $t4, $t4, 1

lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 's', terminarPrograma
    addiu $t4, $t4, 1

lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 'n', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, ':', terminarPrograma
    addiu $t4, $t4, 1

lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '"', terminarPrograma

addiu $t4, $t4, 1
lb   $t5, $t4        # Leer el siguiente byte del archivo

cicloTokenizarUNM:
    sb   $t5, $t2        # Almacenar el byte en el arreglo de UNM
    addiu $t2, $t2, 1       # Incrementar el apuntador del arreglo de UNM
addiu $t4, $t4, 1       # Incrementar el apuntador de lectura del archivo
    lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '"', cicloTokenizarUNM    # Continuar tokenizando mientras no se encuentre una comilla doble

addiu $t4, $t4, 1

 lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '|', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 't', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, 's', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4       # Leer el siguiente byte del archivo
    bne  $t5, 'p', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, ':', terminarPrograma
    addiu $t4, $t4, 1
    
lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '"', terminarPrograma


addiu $t4, $t4, 1
lb   $t5, $t4        # Leer el siguiente byte del archivo

cicloTokenizarTSP:
    sb   $t5, $t3        # Almacenar el byte en el arreglo de TSP
    addiu $t3, $t3, 1       # Incrementar el apuntador del arreglo de TSP
addiu $t4, $t4, 1       # Incrementar el apuntador de lectura del archivo
    lb   $t5, $t4        # Leer el siguiente byte del archivo
    bne  $t5, '"', cicloTokenizarTSP    # Continuar tokenizando mientras no se encuentre una comilla doble
addiu $t4, $t4, 1       # Incrementar el apuntador de lectura del archivo
    bne $4, 0   cicloTokenizarArchivo

# Ordenamiento de la tabla de Logs por fecha en formato epoch
	li	$t5, 0
	loopOrdenamiento:
	li	$t6, 0
	li	$t7, 1
	la	$t8, arregloTSP

	loopComparacion:
		add	$t9, $t8, $t6
		add	$t10, $t8, $t7

		lw	$a0, 0($t9)
		lw	$a1, 0($t10)

		slt	$t11, $a0, $a1
		beqz	$t11, noIntercambio

		# Intercambio de valores
		sw	$a1, 0($t9)
		sw	$a0, 0($t10)

		li	$t5, 1

	noIntercambio:
		addiu	$t6, $t6, 4
		addiu	$t7, $t7, 4
		blt	$t7, 1600, loopComparacion

	bnez	$t5, loopOrdenamiento
	
# Eliminación de archivos duplicados en la tabla de Alerts
li	$t5, 0
li	$t6, 0
la	$t7, arregloUNM

loopEliminacionDuplicados:
	la	$t8, arregloUNM
	add	$t8, $t8, 1600
	li	$t9, 0

	loopComparacion2:
		bge	$t8, $t7, finComparacion2

		lw	$a0, 0($t7)
		lw	$a1, 0($t8)

		beq	$a0, $a1, duplicadoEncontrado

		addiu	$t8, $t8, 4
		addiu	$t9, $t9, 4
		j	loopComparacion2

	duplicadoEncontrado:
		sw	$t9, 0($t8)
		addiu	$t6, $t6, 1
		addiu	$t8, $t8, 4
		b	loopComparacion2

	finComparacion2:
	addiu	$t7, $t7, 4
	blt	$t7, 1600, loopEliminacionDuplicados

# Revisión de reglas y generación del archivo "Alerts_Triggered.log"
li	$t5, 0
li	$t6, 0
li	$t7, 0

la	$t8, arregloTSP
la	$t9, arregloALM
la	$t10, arregloALT
la	$t11, arregloALC

openAlertsFile:
	la	$a0, "Alerts_Triggered.log"
	li	$v0, 13
	li	$a1, 1	# O_CREAT
	li	$a2, 1	# O_WRONLY
	li	$a3, 420	# File permissions: 0644
	syscall
	move	$t0, $v0

loopRevisionReglas:
	add	$t1, $t8, $t5
	add	$t2, $t9, $t5
	add	$t3, $t10, $t5
	add	$t4, $t11, $t5

	lw	$a0, 0($t1)	# Fecha
	lw	$a1, 0($t2)	# Alarmas
	lw	$a2, 0($t3)	# Logs
	lw	$a3, 0($t4)	# Contador

	bltz	$a3, noAlertaGenerada

	# Generar alarmas y escribir en el archivo
	li	$t6, 1
	sw	$t7, 0($t4)	# Reiniciar contador

	writeAlerts:
		li	$v0, 15
		move	$a0, $t0
		lw	$a1, 0($t2)
		lw	$a2, 0($t3)
		syscall

		addiu	$t2, $t2, 4
		addiu	$t3, $t3, 4

		addiu	$t7, $t7, 1
		addiu	$a3, $a3, -1

		bnez	$a3, writeAlerts

noAlertaGenerada:
	addiu	$t5, $t5, 4
	blt	$t5, 1600, loopRevisionReglas

	closeAlertsFile:
	li	$v0, 16
	move	$a0, $t0
	syscall

# Función de búsqueda y generación del archivo "Report.log"
li	$t5, 0
li	$t6, 0

la	$t7, arregloUSR
la	$t8, arregloIP
la	$t9, arregloREP

searchAndGenerateReport:
	# Preguntar al usuario si desea buscar por IP o por usuario
	li	$v0, 4
	la	$a0, promptBuscar
	syscall

	li	$v0, 5
	syscall
	move	$t0, $v0

	# Realizar la búsqueda y generar el reporte
	li	$t5, 0
	li	$t6, 0

loopSearch:
	add	$t1, $t7, $t5
	add	$t2, $t8, $t5
	add	$t3, $t9, $t5

	beq	$t0, 1, searchByIP
	beq	$t0, 2, searchByUser

searchByIP:
	lw	$a0, 0($t2)	# IP a buscar
	beqz	$a0, noMatchIP

	# Generar reporte de IP encontrada
	li	$t6, 1
	sw	$t6, 0($t3)

	li	$v0, 4
	la	$a0, mensajeReporteIP
	syscall

	addiu	$t6, $t6, 1

	lw	$a0, 0($t2)	# IP
	li	$v0, 1
	syscall

	li	$v0, 4
	la	$a0, mensajeReporteUsuario
	syscall

	lw	$a0, 0($t1)	# Usuario
	li	$v0, 4
	syscall

	b continueSearch

noMatchIP:
	addiu	$t5, $t5, 4
	blt	$t5, 1600, loopSearch
	j endSearch

searchByUser:
	la	$a0, promptUsuario
	li	$v0, 8
	syscall
	move	$a1, $t1	# Guardar usuario buscado en $a1

loopSearchUser:
	add	$t1, $t7, $t5
	add	$t2, $t8, $t5
	add	$t3, $t9, $t5

	lw	$a0, 0($t1)	# Usuario a buscar
	beqz	$a0, noMatchUser

	# Generar reporte de usuario encontrado
	li	$t6, 1
	sw	$t6, 0($t3)

	li	$v0, 4
	la	$a0, mensajeReporteUsuario
	syscall

	lw	$a0, 0($t1)	# Usuario
	li	$v0, 4
	syscall

	li	$v0, 4
	la	$a0, mensajeReporteIP
	syscall

	lw	$a0, 0($t2)	# IP
	li	$v0, 1
	syscall

	b continueSearch

noMatchUser:
	addiu	$t5, $t5, 4
	blt	$t5, 1600, loopSearchUser

continueSearch:
	# Preguntar al usuario si desea continuar la búsqueda
	li	$v0, 4
	la	$a0, promptContinuar
	syscall

	li	$v0, 5
	syscall
	move	$t4, $v0

	# Si el usuario desea continuar, repetir la búsqueda
	beqz	$t4, searchAndGenerateReport

endSearch:
	# Generar archivo "Report.log"
	la	$a0, "Report.log"
	li	$v0, 13
	li	$a1, 1	# O_CREAT
	li	$a2, 1	# O_WRONLY
	li	$a3, 420	# File permissions: 0644
	syscall
	move	$t0, $v0

	writeReport:
		li	$v0, 15
		move	$a0, $t0
		lw	$a1, 0($t9)
		syscall

		addiu	$t9, $t9, 4
		addiu	$t6, $t6, -1

		bnez	$t6, writeReport

	closeReport:
	li	$v0, 16
	move	$a0, $t0
	syscall

# Función para identificar posibles ataques
li	$t5, 0

identifyAttacks:
	li	$t5, 0

	loopIdentify:
		add	$t1, $t8, $t5
		add	$t2, $t9, $t5

		lw	$t3, 0($t1)	# IP
		lw	$t4, 4($t1)	# Cantidad de registros

		# Verificar si la IP tiene más de 50 registros en menos de 3 segundos
		li	$t6, 50
		bge	$t4, $t6, checkTime

		addiu	$t5, $t5, 8
		blt	$t5, 1600, loopIdentify
		j endIdentify

	checkTime:
		li	$t7, 3
		mul	$t7, $t7, 1000000	# Convertir 3 segundos a microsegundos

		lw	$t8, 8($t1)	# Último registro
		lw	$t9, 12($t1)	# Tiempo del último registro

		sub	$t8, $t8, $t9	# Calcular diferencia entre el último registro y el primer registro

		bge	$t8, $t7, addAlert

		addiu	$t5, $t5, 8
		blt	$t5, 1600, loopIdentify
		j endIdentify

	addAlert:
		# Agregar la IP a la tabla de Alerts
		li	$t6, 1
		sw	$t6, 0($t2)

		# Notificar el ataque en el reporte
		li	$v0, 4
		la	$a0, mensajeReporteAtaque
		syscall

		lw	$a0, 0($t1)	# IP
		li	$v0, 1
		syscall

		b loopIdentify

	endIdentify:
	terminarProgram:
	li $v0, 10
	syscall